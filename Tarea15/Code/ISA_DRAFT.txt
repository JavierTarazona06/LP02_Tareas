        """@staticmethod
        def carga_inm():
            # TODO: Continuar aqui
            """
            #Cargar un entero inmediato (32 bits) al registro en
            #los bits menos significativos.
            #Hace una limpieza antes de cargar para dejarlo como nuevo.
            """
            r = NC.binary_list2natural(CU.instruction_args[1])
            v: list[int] = CU.instruction_args[2]

            # val_rec: list[int] = leer_reg(r, mode="bin")
            val_rec: list[int] = [0 for _ in range(constants.WORDS_SIZE_BITS)]
            val_rec[32:] = v.copy()

            escribir_reg(
                r,
                val_rec,
                mode="bin"
            )
            ALU.modify_state(val_rec, mode="bin")

        @staticmethod
        def carga_inm_superior():
            """
            #Cargar un entero inmediato (32 bits) al registro en
            #los bits m√°s significativos
            """
            r: int = NC.binary_list2natural(CU.instruction_args[1])
            v: list[int] = CU.instruction_args[2]

            # Leer lo que ya hay
            val_rec: list[int] = leer_reg(r, mode="bin")
            val_rec[0:32] = v.copy()

            escribir_reg(
                r,
                val_rec,
                mode="bin"
            )
            ALU.modify_state(val_rec, mode="bin")

        @staticmethod
        def suma_inm():
            """
            #Suma el registro destino con un entero inmediato
            """
            r: int = NC.binary_list2natural(CU.instruction_args[1])
            v: int = NC.binary_list2natural(CU.instruction_args[2])

            v1 = leer_reg(r, mode="int")
            v2 = v
            value_result: int = v1 + v2

            ALU.modify_state(value_result, mode="int")

            escribir_reg(
                r,
                value_result,
                mode="int"
            )"""

    # ------------------
    # Type J
    # ------------------